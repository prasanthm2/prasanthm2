-- Dropping the procedure if it already exists
DROP PROCEDURE IF EXISTS Replace_Command_Variables;

-- Creating the procedure
CREATE PROCEDURE Replace_Command_Variables()
LANGUAGE SQL
MODIFIES SQL DATA
BEGIN
    -- Declare variables
    DECLARE v_process_id INT;
    DECLARE v_command VARCHAR(1000);
    DECLARE v_parm VARCHAR(100);
    DECLARE v_parm_value VARCHAR(100);
    DECLARE v_modified_command VARCHAR(1000);
    DECLARE at_end1 INT DEFAULT 0;
    DECLARE at_end2 INT DEFAULT 0;

    -- Declare cursor for commands
    DECLARE command_cursor CURSOR FOR 
        SELECT process_id, CMD_TX FROM DICT.T_PROCESS;

    -- Declare cursor for parameters
    DECLARE parm_cursor CURSOR FOR 
        SELECT parm, parm_value FROM oper.stg_cts_env;

    -- Declare a condition for end of data
    DECLARE CONTINUE HANDLER FOR NOT FOUND
        SET at_end1 = 1;

    -- Open the command cursor
    OPEN command_cursor;
    FETCH command_cursor INTO v_process_id, v_command;

    -- Loop through commands
    WHILE at_end1 = 0 DO
        SET v_modified_command = v_command;
        SET at_end2 = 0;

        -- Open the parameters cursor
        OPEN parm_cursor;
        FETCH parm_cursor INTO v_parm, v_parm_value;

        -- Declare handler for second cursor
        DECLARE CONTINUE HANDLER FOR NOT FOUND
            SET at_end2 = 1;

        -- Loop through parameters to replace in the command
        WHILE at_end2 = 0 DO
            -- Replace occurrences of parameter with its value
            SET v_modified_command = REPLACE(v_modified_command, v_parm, v_parm_value);
            FETCH parm_cursor INTO v_parm, v_parm_value;
        END WHILE;
        CLOSE parm_cursor;

        -- Output the modified command
        INSERT INTO SESSION.TEMP_COMMANDS
        VALUES (v_process_id, v_command, v_modified_command);

        FETCH command_cursor INTO v_process_id, v_command;
    END WHILE;
    CLOSE command_cursor;

    -- Output the results
    SELECT * FROM SESSION.TEMP_COMMANDS;
END@


CREATE GLOBAL TEMPORARY TABLE SESSION.TEMP_COMMANDS (
    process_id INT,
    original_command VARCHAR(1000),
    replaced_command VARCHAR(1000)
) ON COMMIT PRESERVE ROWS;
