WITH ReplaceCTE (process_id, original_command, command_string, cycle) AS (
    -- Initial select to set up the CTE with the base data
    SELECT 
        process_id,
        CMD_TX AS original_command,
        CMD_TX AS command_string,
        1 AS cycle
    FROM 
        DICT.T_PROCESS

    UNION ALL

    -- Recursive part for replacing variables with values
    SELECT 
        r.process_id,
        r.original_command,
        REPLACE(r.command_string, e.parm, e.parm_value),
        r.cycle + 1
    FROM 
        ReplaceCTE r
    JOIN 
        oper.stg_cts_env e 
    ON 
        LOCATE(e.parm, r.command_string) > 0
    WHERE 
        r.cycle < 100 -- This limit is important to prevent infinite recursion
)

-- Final SELECT to get the last version of the command string after all replacements
SELECT 
    process_id,
    original_command,
    command_string AS replaced_command
FROM 
    ReplaceCTE
WHERE 
    (process_id, cycle) IN (
        SELECT process_id, MAX(cycle)
        FROM ReplaceCTE
        GROUP BY process_id
    )
;


-- Preparing a single statement solution for replacing variables without recursion
SELECT 
    p.process_id,
    p.CMD_TX AS original_command,
    XMLCAST(
        XMLQUERY(
            'transform copy $c := $cmd modify do replace value of $c with fn:replace($c, $parm, $value) return $c'
            PASSING 
                p.CMD_TX AS "cmd",
                e.parm AS "parm",
                e.parm_value AS "value"
        ) AS VARCHAR(1000)
    ) AS replaced_command
FROM 
    DICT.T_PROCESS p, oper.stg_cts_env e
WHERE 
    LOCATE(e.parm, p.CMD_TX) > 0
