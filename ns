-- Drop the temporary table if it exists
DROP TABLE IF EXISTS DICT.TEMP_COMMANDS;

-- Create a new global temporary table under the DICT schema
CREATE GLOBAL TEMPORARY TABLE DICT.TEMP_COMMANDS (
    process_id INT,
    original_command VARCHAR(1000),
    replaced_command VARCHAR(1000)
) ON COMMIT PRESERVE ROWS;

-- Drop the procedure if it exists
DROP PROCEDURE IF EXISTS DICT.SP_ENV;

-- Create the procedure under the DICT schema
CREATE PROCEDURE DICT.SP_ENV()
LANGUAGE SQL
BEGIN
    DECLARE v_process_id INT;
    DECLARE v_command VARCHAR(1000);
    DECLARE v_parm VARCHAR(100);
    DECLARE v_parm_value VARCHAR(100);
    DECLARE v_modified_command VARCHAR(1000);
    DECLARE at_end INT DEFAULT 0;

    DECLARE command_cursor CURSOR FOR 
        SELECT process_id, CMD_TX FROM DICT.T_PROCESS
        WHERE CMD_TX LIKE '%$%';  -- Only fetch commands that might have replacements

    DECLARE parm_cursor CURSOR FOR 
        SELECT parm, parm_value FROM oper.stg_cts_env;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET at_end = 1;

    OPEN command_cursor;
    FETCH command_cursor INTO v_process_id, v_command;

    WHILE at_end = 0 DO
        SET v_modified_command = v_command;

        OPEN parm_cursor;
        FETCH parm_cursor INTO v_parm, v_parm_value;

        WHILE at_end = 0 DO
            IF LOCATE(v_parm, v_modified_command) > 0 THEN
                SET v_modified_command = REPLACE(v_modified_command, v_parm, v_parm_value);
            END IF;
            FETCH parm_cursor INTO v_parm, v_parm_value;
        END WHILE;

        CLOSE parm_cursor;

        INSERT INTO DICT.TEMP_COMMANDS(process_id, original_command, replaced_command)
        VALUES (v_process_id, v_command, v_modified_command);

        FETCH command_cursor INTO v_process_id, v_command;
        SET at_end = 0;
    END WHILE;

    CLOSE command_cursor;
END;
